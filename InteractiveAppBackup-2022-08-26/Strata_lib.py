

# This file was *autogenerated* from the file Strata_lib.sage
from sage.all_cmdline import *   # import sage library

_sage_const_110 = Integer(110); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2)# Import needed libraries
import ipywidgets as widgets
import re
import numpy as np
from IPython.display import display, Markdown, Latex

def strata(input_str):
    macaulay2.eval("""needs "VoganV.m2";""")
    orig_input = input_str
    row_num = len(input_str.replace(",",""))
    col_num = _sage_const_110 //(_sage_const_4 *row_num)
    
    if input_str[-_sage_const_1 ] == ",":
        input_str = input_str.strip(",")
    
    input_str = "L := getAllStrataR({"+input_str+"});"
    
    macaulay2.eval(input_str)
    
    L_length = int(macaulay2.eval("#L"))
    
    strata_list = []
    for i in range(L_length):
        input_str = "L#" + str(i)
        output_str = str(macaulay2(input_str))
        strata_list.append(output_str.split("\n"))
    strata_list = np.array(strata_list)
    
    print_list = np.empty(strata_list.shape, dtype = str)
    
    print_str = ""
    for i in range(L_length//col_num+_sage_const_1 ):
        for j in range(row_num):
            print_str += ((j+_sage_const_1 )*"  "+"   ").join([strata_list[col_num*i+k,j] for k in range(min(col_num,L_length-col_num*i))])
            print_str += "\n"
    
    print("There are",L_length,"strata for dimensions",orig_input)
    print(print_str)
    
def substrata(input_str):
    macaulay2.eval("""needs "VoganV.m2";""")
    orig_input = input_str
    first = re.findall(r'\{[0-9,]*[0-9]\}', orig_input)[_sage_const_0 ]
    first = first.strip('{').strip('}').replace(',',"")
    row_num = len(first)
    col_num = _sage_const_110 //(_sage_const_4 *row_num)
    input_str = "orbit := new RankConditions from ("+input_str+");"
    
    macaulay2.eval(input_str)
    macaulay2.eval("""
        subStrata = getAllSubstrata orbit
    """)
    subStrata = macaulay2("subStrata")
    
    strata_list = []
    for i in range(len(subStrata)):
        output_str = str(subStrata[i])
        strata_list.append(output_str.split("\n"))
    strata_list = np.array(strata_list)
    
    print_list = np.empty(strata_list.shape, dtype = str)
    
    print_str = ""
    for i in range(len(subStrata)//col_num+_sage_const_1 ):
        for j in range(row_num):
            print_str += ((j+_sage_const_1 )*"  "+"   ").join([strata_list[col_num*i+k,j] 
                                                  for k in range(min(col_num,len(subStrata)-col_num*i))])
            print_str += "\n"
    
    print("There are",len(subStrata),"substrata for",orig_input)
    print(print_str)
    
    
def representative(input_str, other = False):
    macaulay2.eval("""needs "VoganV.m2";""")
    orig_input = input_str
    input_str = "orbit := new RankConditions from ("+input_str+");"
    
    macaulay2.eval(input_str)
    if other:
        macaulay2.eval("""
            rep = getOtherMatrixRep orbit
        """)
    else:
        macaulay2.eval("""
            rep = getMatrixRep orbit
        """)
    rep = macaulay2("rep")
    
    output_str = ''
    for i in range(len(rep)):
        input_str = 'rep#'+ str(i)
        output_str += macaulay2.eval('tex '+input_str)
        if i != len(rep)-_sage_const_1 :
            output_str += r'$\oplus$'
    
    output_str = output_str.replace('smallmatrix','matrix')
    singleton_list = re.findall(r'\$[0-9]\$', output_str)
    for term in singleton_list:
        output_str = output_str.replace(term, r'$(' + term.replace(r"$","") + r')$')
    display(Markdown(output_str))
    
    
def sub_representatives(input_str, other = False):
    macaulay2.eval("""needs "VoganV.m2";""")
    orig_input = input_str
    input_str = "orbit := new RankConditions from ("+input_str+");"
    
    macaulay2.eval(input_str)
    macaulay2.eval("""
        subStrata = getAllSubstrata orbit
    """)
    subStrata = macaulay2("subStrata")
    
    reps = []
    for i in range(len(subStrata)):
        if other:
            input_str = 'rep'+str(i)+' = getOtherMatrixRep subStrata#' +str(i)
        else:
            input_str = 'rep'+str(i)+' = getMatrixRep subStrata#' +str(i)
        macaulay2.eval(input_str)
        reps.append(macaulay2('rep'+str(i)))
    
    for i in range(len(reps)):
        substrataTex = macaulay2.eval('tex subStrata#'+str(i))
        output_str = substrataTex.replace(r'\texttt{RankConditions}','')
        output_str = output_str.replace(r'\textit{dims}\ \Rightarrow \ ','')
        output_str = output_str.replace(r'\textit{levels}\ \Rightarrow \ ','')
        output_str += r':  '
        
        for j in range(len(reps[i])):
            input_str = 'rep'+ str(i)+'#'+str(j)
            output_str += macaulay2.eval('tex '+input_str)
            
            if j != len(reps[i])-_sage_const_1 :
                output_str += r'$\oplus$'
            
        output_str = output_str.replace('smallmatrix','matrix')
        singleton_list = re.findall(r'\$[0-9]\$', output_str)
        for term in singleton_list:
            output_str = output_str.replace(term, r'$(' + term.replace(r"$","") + r')$')
        display(Markdown(output_str)) 
        
def strata_dim(input_str):
    macaulay2.eval("""needs "VoganV.m2";""")
    orig_input = input_str
    first = re.findall(r'\{[0-9,]*[0-9]\}', orig_input)[_sage_const_0 ]
    first = first.strip('{').strip('}').replace(',',"")
    input_str = "orbit := new RankConditions from ("+input_str+");"
    
    macaulay2.eval(input_str)
    macaulay2.eval("""
        dimension = dim getEquations orbit
    """)
    dimension = macaulay2("dimension")
    orbit = macaulay2("orbit")
    
    print(f"The dimension of the following orbit is {str(dimension)}:\n"+str(orbit))


def KS_res_dim(input_str):
    macaulay2.eval("""needs "VoganV.m2";
    needs "ComputeCover.m2";""")
    orig_input = input_str
    first = re.findall(r'\{[0-9,]*[0-9]\}', orig_input)[_sage_const_0 ]
    first = first.strip('{').strip('}').replace(',',"")
    input_str = "orbit := new RankConditions from ("+input_str+");"
    
    macaulay2.eval(input_str)
    macaulay2.eval("""
        dimension = dim computeCover orbit
    """)
    dimension = macaulay2("dimension")
    orbit = macaulay2("orbit")
    
    print(f"The dimension of the KS smooth cover for the following orbit is {str(dimension)}:\n"+str(orbit))

def all_strata_widget():
    im = widgets.interact_manual(strata, 
                     input_str = widgets.Textarea(value="2,4,4,4,2", description = "Dimensions"));
    im.widget.children[_sage_const_1 ].description = "Run Algorithm"
    im.widget.children[_sage_const_1 ].style.button_color = 'violet'

def sub_strata_widget():
    im = widgets.interact_manual(substrata, 
                     input_str = widgets.Textarea(value="{2,4,4,4,2},{{2,3,3,2},{1,2,1},{1,1},{0}}", 
                                                  description = "Strata"))
    im.widget.children[_sage_const_1 ].description = "Run Algorithm"
    im.widget.children[_sage_const_1 ].style.button_color = 'violet'


def rep_widget():
    im = widgets.interact_manual(representative, 
                     input_str = widgets.Textarea(value="{2,4,4,4,2},{{2,3,3,2},{1,2,1},{1,1},{0}}",description = "Strata"),
                    other = widgets.Checkbox(value=False, description='Other Representative',disabled=False, indent=True))
    im.widget.children[_sage_const_2 ].description = "Run Algorithm"
    im.widget.children[_sage_const_2 ].style.button_color = 'violet'


def sub_rep_widget():
    im = widgets.interact_manual(sub_representatives, 
                     input_str = widgets.Textarea(value="{1,2,2,2},{{1,2,0},{1,0},{0}}", description = "Strata"),
                    other = widgets.Checkbox(value=False, description='Other Representative',disabled=False, indent=True))
    im.widget.children[_sage_const_1 ].description = "Run Algorithm"
    im.widget.children[_sage_const_1 ].style.button_color = 'violet'


def dim_widget():
    im = widgets.interact_manual(strata_dim, 
                     input_str = widgets.Textarea(value="{2,4,4,4,2},{{2,3,3,2},{1,2,1},{1,1},{0}}", 
                                                  description = "Strata"))
    im.widget.children[_sage_const_1 ].description = "Run Algorithm"
    im.widget.children[_sage_const_1 ].style.button_color = 'violet'
    
    
def res_dim_widget():
    im = widgets.interact_manual(KS_res_dim, 
                     input_str = widgets.Textarea(value="{1,2,1},{{1,1},{0}}", 
                                                  description = "Strata"))
    im.widget.children[_sage_const_1 ].description = "Run Algorithm"
    im.widget.children[_sage_const_1 ].style.button_color = 'violet'

